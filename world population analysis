I#mporting necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Data Collection
# Load the dataset (example: world_population.csv)
data = pd.read_csv('world_population.csv')
# Display basic info about the dataset
print(data.info())
print(data.head())
# Data Preprocessing
# Handle missing values
data = data.dropna()
# Feature Engineering
# Create additional features if necessary (e.g., population growth rate)
data['GrowthRate'] = data['Population'].pct_change() * 100
data = data.dropna()
# Define features and target variable
features = ['Year', 'BirthRate', 'DeathRate', 'NetMigration', 'FertilityRate']
X = data[features]
y = data['Population']
# Splitting the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
# Feature Scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
# Model Building
# Train a Linear Regression model
model = LinearRegression()
model.fit(X_train_scaled, y_train)
# Predict on the test set
y_pred = model.predict(X_test_scaled)
# Model Evaluation
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R^2 Score:", r2_score(y_test, y_pred))
# Visualization of Results
plt.figure(figsize=(14,7))
plt.plot(data['Year'], data['Population'], label='Actual Population')
plt.plot(X_test['Year'], y_pred, label='Predicted Population', linestyle='--')
plt.xlabel('Year')
plt.ylabel('Population')
plt.title('World Population Prediction')
plt.legend()
plt.show()
